# to run in command line - python bunnie.gotchi

import random, time

min_mood = 0
mid_mood = 7
max_mood = 15
is_mood = 9

def random_int():
    return random.randint(min_mood, max_mood)

def clamp_mood(mood):
    if mood > max_mood:
        mood = max_mood
    elif mood < min_mood:
        mood = min_mood
    return mood

class Bunnie_Pet:
    happy = 7
    annoyed = 0
    hungry = 0
    sleepy = 0
    is_hungry = False
    is_sleepy = False
    is_mess = False
    start = time.time()
    potty_counter = 0
    poke_counter = 0

    def __init__(self):
        self.timer = 0

    def reset_timer(self):
        while True:
            if time.time() - self.start < 600:
                self.timer = int(time.time() - self.start)
            else:
                self.start = time.time()
                self.timer = int(time.time() - self.start)
            break
    
    def mood_happy(self):
        if self.happy > min_mood and (self.timer % 10 == 0 or self.timer % 10 == 5):
            self.happy -= 1

    def mood_annoyed(self):
        # a random occurance when a specific action is being used. but I also want it to tick up when it's happy mood is depreciating and sleepy/hungry is appreciating
        if self.annoyed < max_mood and self.timer > max_mood * 2:
            if self.happy <= 3:
                self.annoyed += 1
            elif self.is_hungry or self.is_sleepy:
                self.annoyed += 2

    def mood_hungry(self):
        if self.hungry < max_mood and self.timer > max_mood: #or self.timer % 10 == 0):
            if self.annoyed < max_mood:
                if self.hungry < mid_mood:
                    self.hungry += 1
                    self.annoyed += 1
                elif self.hungry >= mid_mood and self.hungry < max_mood:
                    self.hungry += 2
                    self.annoyed += 2
        if self.hungry > is_mood:
            self.is_hungry = True
        else:
            self.is_hungry = False

    def mood_sleepy(self):
        if self.sleepy < max_mood and (self.timer > 300 or self.timer % 30 == 0):
            if self.sleepy < mid_mood:
                self.sleepy += 1
            elif self.sleepy >= mid_mood and self.sleepy < (max_mood - 1):
                self.sleepy += 2
        if self.sleepy > is_mood:
            self.is_sleepy = True
        else:
            self.is_sleepy = False

    def action_potty(self):
        if self.timer >= 300 and not self.is_mess:
            potty = random_int()
            x = random_int()
            self.potty_counter += 1
            if potty == x or self.potty_counter == 10:
                self.is_mess = True
                self.potty_counter = 0

    def action_speak(self):
        # going to add another parameter so pet doesnt just spam talking
        if self.happy <= 3:
            print('I am so sad :(')
        elif self.is_hungry == True:
            print('FEED ME >:O')
        elif self.is_sleepy == True:
            print('LET ME SLEEP!!!!!')
        elif self.is_mess == True:
            print('I made a mess')

    def action_dance(self):
        if self.happy == max_mood and self.annoyed == min_mood and not self.is_sleepy and not self.is_mess and not self.is_hungry:
            print('I am dancing :D')

    def action_cuddle(self):
        if self.happy < is_mood:
            self.happy += 1
        elif self.happy >= is_mood and self.happy < max_mood:
            print('I am cuddling <3')
            self.happy += 2
            self.annoyed -= 2

    def action_blowkiss(self):
        if self.happy < max_mood:
            print('I am blowing a kiss <3')
            self.happy += 1
            self.annoyed -= 1

    def pet_moods(self):
        self.mood_annoyed()
        self.mood_happy()
        self.mood_hungry()
        self.mood_sleepy()

    def pet_actions(self):
        self.action_potty()
        self.action_dance()
        self.action_speak()

    def mood_limits(self):
        self.happy = clamp_mood(self.happy)
        self.annoyed = clamp_mood(self.annoyed)
        self.hungry = clamp_mood(self.hungry)
        self.sleepy = clamp_mood(self.sleepy)

    def mood_display(self):
        print(f'Happy: {self.happy}')
        print(f'Annoyed: {self.annoyed}')
        print(f'Hungry: {self.hungry}')
        print(f'Sleepy: {self.sleepy}')

    def user_pet(self):
        self.happy += 3
        print('<3 <3 <3')

    def user_feed(self):
        snacks = ['Popcorn', 'Cookies', 'Pizza', 'Sushi', 'Boba']
        while True:
            print(', '.join(snacks))
            food = input('What would you like to feed your pet? ').capitalize()
            if food in snacks:
                if self.hungry == min_mood:
                    print("NO! I'm not hungry D:<")
                elif food == 'Popcorn':
                    self.hungry -= 2
                    self.happy += 1
                elif food == 'Cookies':
                    self.hungry -= 3
                    self.happy += 2
                elif food == 'Pizza' or food == 'Sushi':
                    self.hungry = min_mood
                    self.happy += 2
                elif food == 'Boba':
                    self.hungry = min_mood
                    self.happy += 5
                break
            else:
                print('Please choose something I would actually eat')

    def user_cleanup(self):
        if self.is_mess:
            self.happy += 2
            self.is_mess = False
            print('Thank you for cleaning my mess >:3')
        else:
            print('Are you calling me DIRTY??? D:')

    def user_poke(self):
        if self.happy > min_mood:
            self.happy -= 1
        if self.annoyed < max_mood:
            self.annoyed += 1
        poke = random_int()
        x = random_int()
        if poke == x or self.poke_counter == max_mood:
            self.poke_counter = 0
            print('RAWR')

class Bunniegotchi_App:
    bunniegotchi = Bunnie_Pet()
    user_actions = ['Feed', 'Pet', 'Cuddle', 'Blowkiss', 'Clean', 'Poke']
    # TODO add a greet option as well
    greeting = 'Hello'

    def __init__(self):
        pass

    def get_user_action(self):
        while True:
            print(', '.join(self.user_actions) + ', or Exit')
            chosen_action = input('What would you like to do? ').capitalize()
            if chosen_action in self.user_actions:
                self.execute_action(chosen_action)
                break
            elif chosen_action == 'Exit':
                print('Thank you for playing!')
                exit()
            else:
                print('Please choose a valid option')

    def execute_action(self, action):
        if action == 'Feed':
            self.bunniegotchi.user_feed()
        elif action == 'Pet':
            self.bunniegotchi.user_pet()
        elif action == 'Blowkiss':
            self.bunniegotchi.action_blowkiss()
        elif action == 'Cuddle':
            self.bunniegotchi.action_cuddle()
        elif action == 'Poke':
            self.bunniegotchi.user_poke()
        elif action == 'Clean':
            self.bunniegotchi.user_cleanup()

    def display_time(self):
        self.bunniegotchi.reset_timer()
        if self.bunniegotchi.timer < 600:
            print(f'Timer: {self.bunniegotchi.timer}')

    def run_app(self):
        # name = input("What's your name? ")
        # print(f'{self.greeting} {name}!')
        # pet_name = input("What do you want to name your gotchi? ")
        # print(f'{pet_name} says hi!!!')
        while True:
            self.bunniegotchi.mood_display()
            self.bunniegotchi.pet_moods()
            self.bunniegotchi.pet_actions()
            self.display_time()
            self.get_user_action()
            self.bunniegotchi.mood_limits()

# class User_Actions:
#     poke = 0
#     poke_counter = 0

#     def  __init__(self, bunnie):
#         self.bunnie = bunnie
    
#     def user_feed(self, mood_dec, mood_inc):
#         snacks = ['Popcorn', 'Cookies', 'Pizza', 'Sushi', 'Boba']
#         while True:
#             print(', '.join(snacks))
#             food = input('What would you like to feed your pet? ').capitalize()
#             if food in snacks:
#                 if mood_dec == min_mood:
#                     print("NO! I'm not hungry D:<")
#                 elif food == 'Popcorn':
#                     mood_dec -= 2
#                     mood_inc += 1
#                 elif food == 'Cookies':
#                     mood_dec -= 3
#                     mood_inc += 2
#                 elif food == 'Pizza' or food == 'Sushi':
#                     mood_dec = min_mood
#                     mood_inc += 2
#                 elif food == 'Boba':
#                     mood_dec = min_mood
#                     mood_inc += 5
#                 break
#             else:
#                 print('Please choose something I would actually eat')

#     # def user_tuckin(self):
#     #     # user needs to do the action of tucking in the pet along with turning off the light
#     #     pass

#     def user_cleanup(self, is_mood, mood):
#         if is_mood:
#             mood += 2
#             is_mood = False
#             print('Thank you for cleaning my mess >:3')
#         else:
#             print('Are you calling me DIRTY??? D:')

#     def user_poke(self, mood_dec, mood_inc):
#         if mood_dec > min_mood:
#             mood_dec -= 1
#         if mood_inc < max_mood:
#             mood_inc += 1
#         poke = random_int()
#         x = random_int()
#         if poke == x or self.poke_counter == 20:
#             self.poke_counter = 0
#             print('RAWR')

bunnie = Bunniegotchi_App()
bunnie.run_app()